#!/usr/bin/env python3

import subprocess
import random

# 获取所有容器信息
def get_containers():
    cmd = "docker ps -a --format '{{.Names}}'"
    output = subprocess.check_output(cmd, shell=True)
    containers = output.decode().strip().split('\n')
    return containers

# 获取所有镜像信息
def get_images():
    cmd = "docker images --format '{{.Repository}}:{{.Tag}}'"
    output = subprocess.check_output(cmd, shell=True)
    images = output.decode().strip().split('\n')
    return images

# 获取容器状态（中文）
def get_container_status(container):
    cmd = f"docker inspect --format='{{{{.State.Status}}}}' {container}"
    output = subprocess.check_output(cmd, shell=True)
    status = output.decode().strip()
    if status == "created":
        status = "已创建"
    elif status == "restarting":
        status = "重启中"
    elif status == "running":
        status = "运行中"
    elif status == "paused":
        status = "已暂停"
    elif status == "exited":
        status = "已退出"
    elif status == "dead":
        status = "已停止"
    return status

# 获取随机颜色
def get_random_color():
    colors = ["\033[1;31m", "\033[1;32m", "\033[1;33m", "\033[1;34m", "\033[1;35m", "\033[1;36m"]
    return random.choice(colors)

# 打印容器信息
def print_containers(containers):
    for i, container in enumerate(containers):
        status = get_container_status(container)
        color = get_random_color()
        print(f"容器 {i+1}：{color}{container}\033[0m ({status})")

# 打印镜像信息
def print_images(images):
    for i, image in enumerate(images):
        print(f"镜像 {i+1}：{image}")

# 启动容器
def start_container(container):
    cmd = f"docker start {container}"
    subprocess.call(cmd, shell=True)

# 停止容器
def stop_container(container):
    cmd = f"docker stop {container}"
    subprocess.call(cmd, shell=True)

# 重启容器
def restart_container(container):
    cmd = f"docker restart {container}"
    subprocess.call(cmd, shell=True)

# 删除容器
def delete_container(container):
    cmd = f"docker rm {container}"
    subprocess.call(cmd, shell=True)

# 删除容器镜像
def delete_container_image(container):
    cmd = f"docker rmi $(docker inspect -f '{{{{.Image}}}}' {container})"
    subprocess.call(cmd, shell=True)

# 主函数
def main():
    containers = get_containers()
    images = get_images()
    print_containers(containers)
    print_images(images)

    print("使用方法：q1 启动容器1，s2 停止容器2，r3 重启容器3，d4 删除容器4，i5 镜像删除容器5，r 刷新容器状态，exit 退出脚本")

    while True:
        input_str = input("请输入操作命令：")
        if input_str == "exit":
            break
        elif input_str == "r":
            containers = get_containers()
            images = get_images()
            print_containers(containers)
            print_images(images)
        elif input_str.startswith("q"):
            index = int(input_str[1:]) - 1
            container = containers[index]
            start_container(container)
        elif input_str.startswith("s"):
            index = int(input_str[1:]) - 1
            container = containers[index]
            stop_container(container)
        elif input_str.startswith("r"):
            index = int(input_str[1:]) - 1
            container = containers[index]
            restart_container(container)
        elif input_str.startswith("d"):
            index = int(input_str[1:]) - 1
            container = containers[index]
            delete_container(container)
        elif input_str.startswith("i"):
            index = int(input_str[1:]) - 1
            container = containers[index]
            delete_container_image(container)
        else:
            print("无效的命令，请重新输入！")
            continue

        containers = get_containers()
        images = get_images()
        print_containers(containers)
        print_images(images)

if __name__ == "__main__":
    main()
